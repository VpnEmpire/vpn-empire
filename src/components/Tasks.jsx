import { useEffect, useState } from 'react';

const TASKS_TEMPLATE = [
  { id: 'ref1', title: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å 1 –¥—Ä—É–≥–∞', reward: 50 },
  { id: 'ref2', title: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å 2 –¥—Ä—É–∑–µ–π', reward: 100 },
  { id: 'ref3', title: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å 3 –¥—Ä—É–∑–µ–π', reward: 200 },
  { id: 'ref4', title: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å 4 –¥—Ä—É–∑–µ–π', reward: 300 },
  { id: 'ref5', title: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å 5 –¥—Ä—É–∑–µ–π', reward: 400 },
  { id: 'ref6', title: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å 6 –¥—Ä—É–∑–µ–π', reward: 500 },
  { id: 'ref7', title: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å 7 –¥—Ä—É–∑–µ–π', reward: 600 },
  { id: 'tg', title: 'üì® –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ Telegram-–∫–∞–Ω–∞–ª', reward: 100, link: 'https://t.me/OrdoHereticusVPN' },
  { id: 'ig', title: '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ Instagram', reward: 100, link: 'https://www.instagram.com/internet.bot.001?igsh=MXRhdzRhdmc1aGhybg==' },
  { id: 'share', title: '–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –Ω–∞—Å –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö', reward: 100 },
  { id: 'comment', title: '–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–¥ –ø–æ—Å—Ç–æ–º', reward: 50 },
  { id: 'react', title: '–ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –∑–∞–ø–∏—Å—å', reward: 50 },
  { id: 'daily', title: '–ó–∞—Ö–æ–¥–∏—Ç—å –≤ VPN –∫–∞–∂–¥—ã–π –¥–µ–Ω—å', reward: 100, repeatable: true }
];

const Tasks = ({ coins, setCoins }) => {
  const [tasks, setTasks] = useState([]);

  useEffect(() => {
    const savedTasks = JSON.parse(localStorage.getItem('tasks'));
    const today = new Date().toDateString();
    const lastTaskDate = localStorage.getItem('lastTaskDate');

    if (!savedTasks || lastTaskDate !== today) {
      const reset = TASKS_TEMPLATE.map(t => ({
        ...t,
        completed: false
      }));
      localStorage.setItem('tasks', JSON.stringify(reset));
      localStorage.setItem('lastTaskDate', today);
      setTasks(reset);
    } else {
      setTasks(savedTasks);
    }
  }, []);

  const completeTask = (taskId) => {
    const updatedTasks = tasks.map(task =>
      task.id === taskId ? { ...task, completed: true } : task
    );
    setTasks(updatedTasks);
    localStorage.setItem('tasks', JSON.stringify(updatedTasks));
    const reward = TASKS_TEMPLATE.find(t => t.id === taskId)?.reward || 0;
    const newCoins = coins + reward;
    setCoins(newCoins);
    localStorage.setItem('coins', newCoins.toString());
  };

  return (
    <div>
      <h2>üéØ –ó–∞–¥–∞–Ω–∏—è</h2>
      {tasks.map(task => (
        <div key={task.id} className="task-card">
          <span>{task.title}</span>
          {task.completed ? (
            <span className="done">‚úÖ</span>
          ) : (
            <button onClick={() => completeTask(task.id)}>
              {task.link ? (
                <a href={task.link} target="_blank" rel="noreferrer">–í—ã–ø–æ–ª–Ω–∏—Ç—å</a>
              ) : '–í—ã–ø–æ–ª–Ω–∏—Ç—å'}
            </button>
          )}
        </div>
      ))}
    </div>
  );
};

export default Tasks;
