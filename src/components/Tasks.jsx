// src/components/Tasks.jsx
import React, { useEffect, useState } from 'react';
import './Tasks.css';

const defaultTasks = [
  { key: 'invite1', label: '–ü—Ä–∏–≥–ª–∞—Å–∏ 1 –¥—Ä—É–≥–∞', reward: 50, requiresReferralCount: 1, type: 'referral' },
  { key: 'invite2', label: '–ü—Ä–∏–≥–ª–∞—Å–∏ 2 –¥—Ä—É–∑–µ–π', reward: 100, requiresReferralCount: 2, type: 'referral' },
  { key: 'invite3', label: '–ü—Ä–∏–≥–ª–∞—Å–∏ 3 –¥—Ä—É–∑–µ–π', reward: 200, requiresReferralCount: 3, type: 'referral' },
  { key: 'invite4', label: '–ü—Ä–∏–≥–ª–∞—Å–∏ 4 –¥—Ä—É–∑–µ–π', reward: 300, requiresReferralCount: 4, type: 'referral' },
  { key: 'invite5', label: '–ü—Ä–∏–≥–ª–∞—Å–∏ 5 –¥—Ä—É–∑–µ–π', reward: 400, requiresReferralCount: 5, type: 'referral' },
  { key: 'invite6', label: '–ü—Ä–∏–≥–ª–∞—Å–∏ 6 –¥—Ä—É–∑–µ–π', reward: 500, requiresReferralCount: 6, type: 'referral' },
  { key: 'invite7', label: '–ü—Ä–∏–≥–ª–∞—Å–∏ 7 –¥—Ä—É–∑–µ–π', reward: 600, requiresReferralCount: 7, type: 'referral' },
  { key: 'subscribeTelegram', label: 'üì® –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ Telegram', reward: 100, link: 'https://t.me/OrdoHereticusVPN', requiresSubscription: true, type: 'subscribe' },
  { key: 'subscribeInstagram', label: 'üì∏ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ Instagram', reward: 100, link: 'https://www.instagram.com/internet.bot.001?igsh=MXRhdzRhdmc1aGhybg==', type: 'subscribe' },
  { key: 'shareSocial', label: 'üì¢ –†–∞—Å—Å–∫–∞–∂–∏ –æ –Ω–∞—Å –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö', reward: 100 },
  { key: 'commentPost', label: 'üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', reward: 50 },
  { key: 'reactPost', label: '‚ù§Ô∏è –ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é', reward: 50 },
  { key: 'dailyVpn', label: 'üõ° –ó–∞—Ö–æ–¥–∏—Ç—å –≤ VPN –∫–∞–∂–¥—ã–π –¥–µ–Ω—å', reward: 100 },
  { key: 'activateVpn', label: 'üöÄ –ê–∫—Ç–∏–≤–∏—Ä—É–π VPN', reward: 1000, link: 'https://t.me/OrdoHereticus_bot', requiresPayment: true, type: 'vpn' }
];

const TasksTab = ({ coins, setCoins }) => {
  const [tasks, setTasks] = useState(() => {
    const saved = localStorage.getItem('tasks');
    return saved ? JSON.parse(saved) : defaultTasks.map(t => ({ ...t, done: false }));
  });

  const [userId, setUserId] = useState(null);
  const [referrals, setReferrals] = useState(0);
  const [vpnActivated, setVpnActivated] = useState(false);
  const [subscribed, setSubscribed] = useState(false);
  const [completedTasks, setCompletedTasks] = useState(() => {
    return JSON.parse(localStorage.getItem('completedTasks')) || {};
  });

  useEffect(() => {
    const tgUserId = window?.Telegram?.WebApp?.initDataUnsafe?.user?.id;
    if (tgUserId) {
      setUserId(tgUserId);

      fetch(`/api/check-referrals?user_id=${tgUserId}`)
        .then(res => res.json())
        .then(data => setReferrals(data.referrals || 0));

      fetch(`/api/check-subscription?user_id=${tgUserId}`)
        .then(res => res.json())
        .then(data => setSubscribed(data.subscribed));

      fetch(`/api/check-payment?user_id=${tgUserId}`)
        .then(res => res.json())
        .then(data => setVpnActivated(data.success));
    }
  }, []);

  useEffect(() => {
    const today = new Date().toDateString();
    const lastDate = localStorage.getItem('dailyTaskDate');

    if (lastDate !== today) {
      const storedTasks = JSON.parse(localStorage.getItem('completedTasks')) || {};
      delete storedTasks['dailyVpn'];
      localStorage.setItem('completedTasks', JSON.stringify(storedTasks));
      localStorage.setItem('dailyTaskDate', today);
      setCompletedTasks(storedTasks);
    }
  }, []);

  const completeTask = async (task) => {
    if (completedTasks[task.key]) return;

    if (task.requiresReferralCount && referrals < task.requiresReferralCount) {
      alert(`–ü—Ä–∏–≥–ª–∞—Å–∏ —Ö–æ—Ç—è –±—ã ${task.requiresReferralCount} –¥—Ä—É–∑–µ–π`);
      return;
    }

    if (task.requiresSubscription && !subscribed) {
      alert('–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ Telegram-–∫–∞–Ω–∞–ª');
      return;
    }

    if (task.requiresPayment) {
      const res = await fetch(`/api/check-payment?user_id=${userId}`);
      const data = await res.json();
      if (!data.success) {
        alert("–°–Ω–∞—á–∞–ª–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–π VPN —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞");
        return;
      }
      setVpnActivated(true);
    }

    const updatedCompleted = { ...completedTasks, [task.key]: true };
    setCompletedTasks(updatedCompleted);
    localStorage.setItem('completedTasks', JSON.stringify(updatedCompleted));
    setCoins(prev => prev + task.reward);

    const updated = tasks.map(t => t.key === task.key ? { ...t, done: true } : t);
    setTasks(updated);
    localStorage.setItem('tasks', JSON.stringify(updated));
  };

  const handleTaskClick = (task) => {
    if (task.done) return;

    if (task.type === 'referral') {
      const link = `https://t.me/OrdoHereticus_bot/vpnempire?startapp=${userId}`;
      navigator.clipboard.writeText(link);
      alert(`–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞:\n${link}`);
    }

    if ((task.type === 'subscribe' || task.type === 'vpn') && task.link) {
      try {
        if (window?.Telegram?.WebApp?.openTelegramLink) {
          window.Telegram.WebApp.openTelegramLink(task.link);
        } else {
          window.open(task.link, '_blank');
        }
      } catch (error) {
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.');
      }

      if (task.type === 'subscribe') {
        alert('–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É');
      }
      if (task.type === 'vpn') {
        alert('–ê–∫—Ç–∏–≤–∏—Ä—É–π VPN —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞');
      }
    }
  };

  return (
    <div className="tasks-tab">
      <h2>üìã –ó–∞–¥–∞–Ω–∏—è</h2>
      {tasks.map(task => (
        <div
          key={task.key}
          className={`task-card ${completedTasks[task.key] ? 'completed' : ''}`}
          onClick={() => handleTaskClick(task)}
        >
          <h3>{task.label}</h3>
          {task.requiresReferralCount && (
            <p>üë• {Math.min(referrals, task.requiresReferralCount)}/{task.requiresReferralCount} –¥—Ä—É–∑–µ–π</p>
          )}
          <p>ü™ô –ù–∞–≥—Ä–∞–¥–∞: {task.reward} –º–æ–Ω–µ—Ç</p>
          {completedTasks[task.key] ? (
            <span className="done">‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ</span>
          ) : (
            <button onClick={(e) => { e.stopPropagation(); completeTask(task); }}>–í—ã–ø–æ–ª–Ω–∏—Ç—å</button>
          )}
        </div>
      ))}
      <div className="task-card disabled-task">
        <span>üîí <strong>–°–∫–æ—Ä–æ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ</strong> ‚Äî üîú –û–∂–∏–¥–∞–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π</span>
      </div>
    </div>
  );
};

export default TasksTab;

