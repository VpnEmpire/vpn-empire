import { useState, useEffect, useRef } from 'react';
import './App.css';

const RANKS = [
  { title: '–ù–æ–≤–∏—á–æ–∫', threshold: 0 },
  { title: '–ê–≥–µ–Ω—Ç', threshold: 300 },
  { title: '–ü—Ä–æ—Ñ–∏', threshold: 600 },
  { title: '–≠–∫—Å–ø–µ—Ä—Ç', threshold: 1000 },
  { title: '–õ–µ–≥–µ–Ω–¥–∞ VPN', threshold: 1500 }
];

const TASKS_TEMPLATE = [
  { id: 'ref1', title: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å 1 –¥—Ä—É–≥–∞', reward: 50 },
  { id: 'ref2', title: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å 2 –¥—Ä—É–∑–µ–π', reward: 100 },
  { id: 'ref3', title: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å 3 –¥—Ä—É–∑–µ–π', reward: 200 },
  { id: 'ref4', title: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å 4 –¥—Ä—É–∑–µ–π', reward: 300 },
  { id: 'ref5', title: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å 5 –¥—Ä—É–∑–µ–π', reward: 400 },
  { id: 'ref6', title: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å 6 –¥—Ä—É–∑–µ–π', reward: 500 },
  { id: 'ref7', title: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å 7 –¥—Ä—É–∑–µ–π', reward: 600 },
  { id: 'tg', title: 'üì® –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ Telegram-–∫–∞–Ω–∞–ª', reward: 100, link: 'https://t.me/OrdoHereticusVPN' },
  { id: 'ig', title: '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ Instagram', reward: 100, link: 'https://www.instagram.com/internet.bot.001?igsh=MXRhdzRhdmc1aGhybg==' },
  { id: 'share', title: '–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –Ω–∞—Å –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö', reward: 100 },
  { id: 'comment', title: '–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–¥ –ø–æ—Å—Ç–æ–º', reward: 50 },
  { id: 'react', title: '–ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –∑–∞–ø–∏—Å—å', reward: 50 },
  { id: 'daily', title: '–ó–∞—Ö–æ–¥–∏—Ç—å –≤ VPN –∫–∞–∂–¥—ã–π –¥–µ–Ω—å', reward: 100, repeatable: true }
];

function App() {
  const [coins, setCoins] = useState(0);
  const [dailyLimit, setDailyLimit] = useState(100);
  const [isShaking, setIsShaking] = useState(false);
  const [tasks, setTasks] = useState([]);
  const clickSoundRef = useRef(null);

  useEffect(() => {
    const storedCoins = parseInt(localStorage.getItem('coins')) || 0;
    const storedDate = localStorage.getItem('lastClickDate');
    const today = new Date().toDateString();

    if (storedDate !== today) {
      setCoins(0);
      setDailyLimit(100);
      localStorage.setItem('lastClickDate', today);
      localStorage.setItem('coins', '0');
      resetTasks();
    } else {
      setCoins(storedCoins);
      setDailyLimit(100 - storedCoins);
      const savedTasks = JSON.parse(localStorage.getItem('tasks')) || [];
      setTasks(savedTasks);
    }
  }, []);

  const handleClick = () => {
    if (coins < 100) {
      const newCoins = coins + 1;
      setCoins(newCoins);
      setDailyLimit(100 - newCoins);
      localStorage.setItem('coins', newCoins.toString());
      if (clickSoundRef.current) {
        clickSoundRef.current.currentTime = 0;
        clickSoundRef.current.play();
      }
      setIsShaking(true);
      setTimeout(() => setIsShaking(false), 300);
    }
  };

  const getRank = () => {
    return RANKS.slice().reverse().find(rank => coins >= rank.threshold)?.title || '–ù–æ–≤–∏—á–æ–∫';
  };

  const resetTasks = () => {
    const reset = TASKS_TEMPLATE.map(task => {
      const storedTasks = JSON.parse(localStorage.getItem('tasks')) || [];
      const old = storedTasks.find(t => t.id === task.id);
      return {
        ...task,
        completed: task.repeatable ? false : old?.completed || false
      };
    });
    localStorage.setItem('tasks', JSON.stringify(reset));
    setTasks(reset);
  };

  const completeTask = (taskId) => {
    const updatedTasks = tasks.map(task =>
      task.id === taskId ? { ...task, completed: true } : task
    );
    setTasks(updatedTasks);
    localStorage.setItem('tasks', JSON.stringify(updatedTasks));
    const task = TASKS_TEMPLATE.find(t => t.id === taskId);
    const reward = task?.reward || 0;
    const newCoins = coins + reward;
    setCoins(newCoins);
    localStorage.setItem('coins', newCoins.toString());
  };

  return (
    <div className="app">
      <h1>üëæ VPN Empire üöÄ</h1>
      <p>–¢–≤–æ–µ –∑–≤–∞–Ω–∏–µ: <strong>{getRank()}</strong></p>
      <img
        src="/robot.png"
        alt="–†–æ–±–æ—Ç"
        className={`robot ${isShaking ? 'shake' : ''}`}
        onClick={handleClick}
      />
      <div className="counter">
        {coins}/100 –º–æ–Ω–µ—Ç {dailyLimit <= 0 && '(–ª–∏–º–∏—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è)'}
      </div>

      <h2>üéØ –ó–∞–¥–∞–Ω–∏—è</h2>
      {tasks.map(task => (
        <div key={task.id} className="task-card">
          <span>{task.title}</span>
          {task.completed ? (
            <span className="done">‚úÖ</span>
          ) : (
            <button onClick={() => completeTask(task.id)}>
              {task.link ? (
                <a href={task.link} target="_blank" rel="noreferrer">–í—ã–ø–æ–ª–Ω–∏—Ç—å</a>
              ) : '–í—ã–ø–æ–ª–Ω–∏—Ç—å'}
            </button>
          )}
        </div>
      ))}

      <audio ref={clickSoundRef} src="/click.mp3" preload="auto" />
    </div>
  );
}

export default App;
