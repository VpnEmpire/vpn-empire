// src/App.jsx
import React, { useState, useEffect, useRef } from 'react';
import './App.css';
import BottomNav from './components/BottomNav.jsx';
import TopTab from './components/Top.jsx';

function App() {
  const [activeTab, setActiveTab] = useState('home');
  const [coins, setCoins] = useState(() => Number(localStorage.getItem('coins')) || 0);
  const [rank, setRank] = useState('');
  const [clicksToday, setClicksToday] = useState(() => Number(localStorage.getItem('clicksToday')) || 0);
  const [hasSubscription, setHasSubscription] = useState(() => localStorage.getItem('hasSubscription') === 'true');
  const maxClicksPerDay = 100;
  
  // –ó–≤—É–∫ –∏ –ª–æ–≥–∏–∫–∞ —Ä—É–ª–µ—Ç–∫–∏
  const spinSoundRef = useRef(null);
  const winSoundRef = useRef(null);
  const [canSpin, setCanSpin] = useState(true);
  const [isSpinning, setIsSpinning] = useState(false);
  const [spinResult, setSpinResult] = useState(null);

  useEffect(() => {
    const lastSpinDate = localStorage.getItem('lastSpinDate');
    const today = new Date().toDateString();
    if (lastSpinDate === today) setCanSpin(false);
  }, []);

  useEffect(() => {
    localStorage.setItem('coins', coins);
    updateRank(coins);
  }, [coins]);

  useEffect(() => {
    const today = new Date().toDateString();
    const lastClickDate = localStorage.getItem('lastClickDate');
    if (lastClickDate !== today) {
      setClicksToday(0);
      localStorage.setItem('lastClickDate', today);
    }
  }, []);

  useEffect(() => {
    localStorage.setItem('clicksToday', clicksToday);
  }, [clicksToday]);

  const handleClick = () => {
    if (clicksToday < maxClicksPerDay) {
      setCoins(prev => prev + 1);
      setClicksToday(prev => prev + 1);
      triggerAnimation();
      playClickSound();
    }
  };

  const triggerAnimation = () => {
    const flash = document.createElement('div');
    flash.className = 'flash';
    document.body.appendChild(flash);
    setTimeout(() => document.body.removeChild(flash), 300);
  };

  const playClickSound = () => {
    const audio = new Audio('/click.mp3');
    audio.play();
  };

  const updateRank = (totalCoins) => {
    if (totalCoins >= 5000) setRank('–õ–µ–≥–µ–Ω–¥–∞ VPN');
    else if (totalCoins >= 2000) setRank('–≠–∫—Å–ø–µ—Ä—Ç');
    else if (totalCoins >= 1000) setRank('–ü—Ä–æ—Ñ–∏');
    else if (totalCoins >= 500) setRank('–ê–≥–µ–Ω—Ç');
    else setRank('–ù–æ–≤–∏—á–æ–∫');
  };

  const handleSubscriptionConfirm = () => {
    localStorage.setItem('hasSubscription', 'true');
    setHasSubscription(true);
  };

  const renderSubscriptionPrompt = () => (
    <div className="subscription-block">
      <h2>üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</h2>
      <p>–ß—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –æ—Ç 100‚ÇΩ –≤ Telegram-–±–æ—Ç–µ:</p>
      <a className="tg-link" href="https://t.me/OrdoHereticusVPN" target="_blank" rel="noopener noreferrer">
        –ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç
      </a>
      <button className="confirm-btn" onClick={handleSubscriptionConfirm}>
        ‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª
      </button>
    </div>
  );

  const renderHome = () => (
    <div className="main-content">
      <div className="heander-box">
        <div className="coins" –ú–æ–Ω–µ—Ç>: {coins} $RICH</div>
        <div className=üéñ –ó–≤–∞–Ω–∏–µ: {rank}</div>
      </div>
  <div className="robot-container">
      <img
        src="/robot.png"
        alt="robot"
        className="robot"
        onClick={handleClick}
      />
      <div className="clicks-left">üí• {clicksToday}/{maxClicksPerDay} –º–æ–Ω–µ—Ç</div>
    </div>

    <div className="helper-box">
      ü§ñ <strong>–Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫!</strong><br />
      –ö–ª–∏–∫–∞–π –Ω–∞ —Ä–æ–±–æ—Ç–∞ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –º–æ–Ω–µ—Ç—ã.
    </div>
  </div>
);

  const renderTasks = () => (
    <div className="tasks-tab">
      <h2>üéØ –ó–∞–¥–∞–Ω–∏—è</h2>
      <div className="task-card">–ü—Ä–∏–≥–ª–∞—Å–∏ 1 –¥—Ä—É–≥–∞ ‚Äì üí∞ 50 –º–æ–Ω–µ—Ç</div>
      <div className="task-card">–ü—Ä–∏–≥–ª–∞—Å–∏ 2 –¥—Ä—É–∑–µ–π ‚Äì üí∞ 100 –º–æ–Ω–µ—Ç</div>
      <div className="task-card">–ü—Ä–∏–≥–ª–∞—Å–∏ 3 –¥—Ä—É–∑–µ–π ‚Äì üí∞ 200 –º–æ–Ω–µ—Ç</div>
      <div className="task-card">–ü—Ä–∏–≥–ª–∞—Å–∏ 4 –¥—Ä—É–∑–µ–π ‚Äì üí∞ 300 –º–æ–Ω–µ—Ç</div>
      <div className="task-card">–ü—Ä–∏–≥–ª–∞—Å–∏ 5 –¥—Ä—É–∑–µ–π ‚Äì üí∞ 400 –º–æ–Ω–µ—Ç</div>
      <div className="task-card">–ü—Ä–∏–≥–ª–∞—Å–∏ 6 –¥—Ä—É–∑–µ–π ‚Äì üí∞ 500 –º–æ–Ω–µ—Ç</div>
      <div className="task-card">–ü—Ä–∏–≥–ª–∞—Å–∏ 7 –¥—Ä—É–∑–µ–π ‚Äì üí∞ 600 –º–æ–Ω–µ—Ç</div>
      <div className="task-card">üì® –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ Telegram ‚Äì üí∞ 100 –º–æ–Ω–µ—Ç</div>
      <div className="task-card">–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ Instagram ‚Äì üí∞ 100 –º–æ–Ω–µ—Ç</div>
      <div className="task-card">–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –Ω–∞—Å –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö ‚Äì üí∞ 100 –º–æ–Ω–µ—Ç</div>
      <div className="task-card">–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ‚Äì üí∞ 50 –º–æ–Ω–µ—Ç</div>
      <div className="task-card">–ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é ‚Äì üí∞ 50 –º–æ–Ω–µ—Ç</div>
      <div className="task-card">–ó–∞—Ö–æ–¥–∏—Ç—å –≤ VPN –∫–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äì üí∞ 100 –º–æ–Ω–µ—Ç</div>
    </div>
  );

  const spinWheel = () => {
    if (!canSpin) return;
    if (spinSoundRef.current) {
      spinSoundRef.current.currentTime = 0;
      spinSoundRef.current.play();
    }
    setIsSpinning(true);
    const rewardOptions = [20, 50, 100, 200, 300, 400];
    const reward = rewardOptions[Math.floor(Math.random() * rewardOptions.length)];
    setTimeout(() => {
      const newCoins = coins + reward;
      setCoins(newCoins);
      setSpinResult(reward);
      setCanSpin(false);
      setIsSpinning(false);
      localStorage.setItem('coins', newCoins.toString());
      localStorage.setItem('lastSpinDate', new Date().toDateString());
      if (winSoundRef.current) {
        winSoundRef.current.currentTime = 0;
        winSoundRef.current.play();
      }
    }, 2000);
  };

  const renderRoulette = () => (
    <div className="roulette-tab">
      <h2>üé∞ –†—É–ª–µ—Ç–∫–∞</h2>
      <img src="/roulette.gif" alt="–†—É–ª–µ—Ç–∫–∞" className="roulette-image" style={{ width: '200px', marginBottom: '20px' }} />
      <button className="spin-button" onClick={spinWheel} disabled={!canSpin || isSpinning}>
        {isSpinning ? '–ö—Ä—É—Ç–∏—Ç—Å—è...' : '–ö—Ä—É—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É'}
      </button>
      {spinResult !== null && !isSpinning && (
        <div className="spin-result">+{spinResult} –º–æ–Ω–µ—Ç!</div>
      )}
      <audio ref={spinSoundRef} src="/spin-sound.mp3" preload="auto" />
      <audio ref={winSoundRef} src="/coins_many.mp3" preload="auto" />
    </div>
  );

  const renderTop = () => (
    <TopTab coins={coins} />
  );

  const renderWithdraw = () => (
    <div className="withdraw-tab">
      <h2>üí∏ –í—ã–≤–æ–¥</h2>
      <p>–ú–∏–Ω–∏–º—É–º –¥–ª—è –≤—ã–≤–æ–¥–∞: 1000 –º–æ–Ω–µ—Ç</p>
      <button
        disabled={coins < 1000}
        className={coins < 1000 ? 'withdraw-button disabled' : 'withdraw-button'}
        onClick={() => {
          if (coins >= 1000) {
            window.open('https://t.me/OrdoHereticusVPN', '_blank');
          }
        }}
      >
        {coins < 1000 ? '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç' : '–í—ã–≤–µ—Å—Ç–∏ —á–µ—Ä–µ–∑ Telegram'}
      </button>
    </div>
  );

  const renderTab = () => {
    switch (activeTab) {
      case 'home':
        return renderHome();
      case 'tasks':
        return renderTasks();
      case 'roulette':
        return renderRoulette();
      case 'top':
        return renderTop();
      case 'withdraw':
        return renderWithdraw();
      default:
        return renderHome();
    }
  };

  return (
    <div className="App">
      {!hasSubscription ? renderSubscriptionPrompt() : renderTab()}
      {hasSubscription && (
        <BottomNav activeTab={activeTab} setActiveTab={setActiveTab} />
      )}
    </div>
  );
}

export default App;

