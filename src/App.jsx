import React, { useState, useEffect, useRef } from 'react';
import './App.css';
import BottomNav from './components/BottomNav.jsx';
import TopTab from './components/Top.jsx';
import Roulette from './components/Roulette.jsx';
import Hometab from './components/Home.jsx';

function App() {
  const [activeTab, setActiveTab] = useState('home');
  const [coins, setCoins] = useState(() => Number(localStorage.getItem('coins')) || 0);
  const [rank, setRank] = useState('');
  const [clicksToday, setClicksToday] = useState(() => Number(localStorage.getItem('clicksToday')) || 0);
  const [hasSubscription, setHasSubscription] = useState(() => localStorage.getItem('hasSubscription') === 'true');
  const [completedTasks, setCompletedTasks] = useState(() => 
JSON.parse(localStorage.getItem('completedTasks')) || {});
  const [flashes, setFlashes] = useState([]);
  const [userId, setUserId] = useState(null);
  const [referrals, setReferrals] = useState(0);
  const [vpnActivated, setVpnActivated] = useState(false);
  const [clickMultiplier, setClickMultiplier] = useState (1);
  const [subscribed, setSubscribed] = useState(false);
  const [isWithdrawApproved, setIsWithdrawApproved] = useState(() => localStorage.getItem('isWithdrawApproved') === 'true');
  const [tasks, setTasks] = useState([
    { key: 'invite1', label: '–ü—Ä–∏–≥–ª–∞—Å–∏ 1 –¥—Ä—É–≥–∞', reward: 50, type: 'referral', requiresReferralCount: 1 },
    { key: 'invite2', label: '–ü—Ä–∏–≥–ª–∞—Å–∏ 2 –¥—Ä—É–∑–µ–π', reward: 100, type: 'referral', requiresReferralCount: 2 },
    { key: 'invite3', label: '–ü—Ä–∏–≥–ª–∞—Å–∏ 3 –¥—Ä—É–∑–µ–π', reward: 200, type: 'referral', requiresReferralCount: 3 },
    { key: 'invite4', label: '–ü—Ä–∏–≥–ª–∞—Å–∏ 4 –¥—Ä—É–∑–µ–π', reward: 300, type: 'referral', requiresReferralCount: 4 },
    { key: 'invite5', label: '–ü—Ä–∏–≥–ª–∞—Å–∏ 5 –¥—Ä—É–∑–µ–π', reward: 400, type: 'referral', requiresReferralCount: 5 },
    { key: 'invite6', label: '–ü—Ä–∏–≥–ª–∞—Å–∏ 6 –¥—Ä—É–∑–µ–π', reward: 500, type: 'referral', requiresReferralCount: 6 },
    { key: 'invite7', label: '–ü—Ä–∏–≥–ª–∞—Å–∏ 7 –¥—Ä—É–∑–µ–π', reward: 600, type: 'referral', requiresReferralCount: 7 },
    { key: 'subscribeTelegram', label: 'üì® –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ Telegram', reward: 100, type: 'subscribe', link: 'https://t.me/OrdoHereticusVPN', requiresSubscription: true },
    { key: 'subscribeInstagram', label: 'üì∏ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ Instagram', reward: 100, type: 'subscribe', link: 
'https://www.instagram.com/internet.bot.001?igsh=MXRhdzRhdmc1aGhybg==' },
    { key: 'shareSocial', label: 'üì¢ –†–∞—Å—Å–∫–∞–∂–∏ –æ –Ω–∞—Å –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö', reward: 100 },
    { key: 'commentPost', label: 'üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', reward: 50 },
    { key: 'reactPost', label: '‚ù§Ô∏è –ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é', reward: 50 },
    { key: 'dailyVpn', label: 'üõ° –ó–∞—Ö–æ–¥–∏—Ç—å –≤ VPN –∫–∞–∂–¥—ã–π –¥–µ–Ω—å', reward: 100 },
    { key: 'activateVpn', label: 'üöÄ –ê–∫—Ç–∏–≤–∏—Ä—É–π VPN', reward: 1000, type: 'vpn', link: 'https://t.me/OrdoHereticus_bot', requiresPayment: true }
  ]);

  const maxClicksPerDay = 100;
  const spinSoundRef = useRef(null);
  const winSoundRef = useRef(null);
  const [canSpin, setCanSpin] = useState(true);
  const [spinResult, setSpinResult] = useState(null);
  useEffect(() => {
    const tgUserId = window?.Telegram?.WebApp?.initDataUnsafe?.user?.id;
    if (tgUserId) {
      setUserId(tgUserId);
      fetch(`/api/check-referrals?user_id=${tgUserId}`)
        .then(res => res.json())
        .then(data => setReferrals(data.referrals || 0));

      fetch(`/api/check-subscription?user_id=${tgUserId}`)
        .then(res => res.json())
        .then(data => setSubscribed(data.subscribed));

      fetch(`/api/check-payment?user_id=${tgUserId}`)
        .then(res => res.json())
        .then(data => setVpnActivated(data.success));
    }
  }, []);
useEffect(() => {
    localStorage.setItem('coins', coins);
    localStorage.setItem('clicksToday', clicksToday);
    localStorage.setItem('completedTasks', JSON.stringify(completedTasks));
  }, [coins, clicksToday, completedTasks]);

  useEffect(() => {
    updateRank(coins);
  }, [coins]);

  useEffect(() => {
    const today = new Date().toDateString();
    if (localStorage.getItem('lastClickDate') !== today) {
      setClicksToday(0);
      localStorage.setItem('lastClickDate', today);
    }
    if (localStorage.getItem('dailyTaskDate') !== today) {
      const updatedTasks = tasks.map(task =>
        task.key === 'dailyVPN' ? { ...task, done: false } : task
      );
      setTasks(updatedTasks);
      localStorage.setItem('tasks', JSON.stringify(updatedTasks));
      localStorage.setItem('dailyTaskDate', today);
    }
    if (localStorage.getItem('lastSpinDate') === today) {
      setCanSpin(false);
    }
  }, []);

  const updateRank = (totalCoins) => {
    if (totalCoins >= 5000) setRank('–õ–µ–≥–µ–Ω–¥–∞ VPN');
    else if (totalCoins >= 2000) setRank('–≠–∫—Å–ø–µ—Ä—Ç');
    else if (totalCoins >= 1000) setRank('–ü—Ä–æ—Ñ–∏');
    else if (totalCoins >= 500) setRank('–ê–≥–µ–Ω—Ç');
    else setRank('–ù–æ–≤–∏—á–æ–∫');
  };

  const playClickSound = () => {
const audio = new Audio('/click.mp3');
    audio.play().catch((e) => console.log('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞:', e));
  };

  const handleClick = (e) => {
    if (clicksToday < maxClicksPerDay) {
      const multiplier = Number(localStorage.getItem('clickMultiplier')) || 1;
      setCoins(prev => prev + 1 * multiplier);
      setClicksToday(prev => prev + 1);
      triggerAnimation();
      playClickSound();
    }
    const flash = { x: e.clientX, y: e.clientY, id: Date.now() };
    setFlashes(prev => [...prev, flash]);
setTimeout(() => {
      setFlashes(prev => prev.filter(f => f.id !== flash.id));
    }, 400);
  };

  const triggerAnimation = () => {
    const flash = document.createElement('div');
    flash.className = 'flash'; 
    flash.style.left = `${Math.random() * window.innerWidth}px`;
    flash.style.top = `${Math.random() * window.innerHeight}px`;
    document.body.appendChild(flash);
    setTimeout(() => {
      document.body.removeChild(flash);
    }, 300);
  };
  
  const checkVpnPayment = async () => {
  try {
    const response = await fetch('https://vpnempire.vercel.app/api/checkUserPayment', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ user_id: userId }),
    });

    const result = await response.json();

    if (result.success) {
      alert('–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ù–∞–≥—Ä–∞–¥–∞ –≤—ã–¥–∞–Ω–∞!');
      // –∑–¥–µ—Å—å –æ–±–Ω–æ–≤–∏ localStorage –∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ completedTasks
      const updated = { ...completedTasks, vpnPayment: true };
      setCompletedTasks(updated);
      localStorage.setItem('completedTasks', JSON.stringify(updated));
      setCoins(coins + 1000);
    } else {
      alert('–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –æ–ø–ª–∞—Ç–∏–ª –≤ Telegram-–±–æ—Ç–µ.');
    }
  } catch (err) {
    console.error(err);
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã.');
  }
};

  const handlePaymentCheck = async (taskKey) => {
  try {
    const response = await fetch('https://vpnempire.vercel.app/api/checkUserPayment', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ user_id: userId }),
    });

    const result = await response.json();

    if (result.success) {
      const updated = { ...completedTasks, [taskKey]: true };
      setCompletedTasks(updated);
      localStorage.setItem('completedTasks', JSON.stringify(updated));
      setCoins(coins + 1000);
      alert('–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ù–∞–≥—Ä–∞–¥–∞ –≤—ã–¥–∞–Ω–∞.');
    } else {
      alert('–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –æ–ø–ª–∞—Ç–∏–ª VPN –≤ Telegram-–±–æ—Ç–µ.');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã:', error);
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.');
  }
};
  
  const completeTask = (task) => {
  if (completedTasks[task.key]) return;

  setCompletedTasks(prev => {
    const updated = { ...prev, [task.key]: true };
    localStorage.setItem('completedTasks', JSON.stringify(updated));
    return updated;
  });

  setCoins(prev => {
    const newCoins = prev + (task.reward || 0);
    localStorage.setItem('coins', newCoins);
    return newCoins;
  });

  if (task.type === 'vpn') {
    setClickMultiplier(2);
  }

  alert(`üéÅ –¢—ã –ø–æ–ª—É—á–∏–ª ${task.reward || 0} –º–æ–Ω–µ—Ç!`);
};
 
const handleTaskClick = async (task) => {
  if (completedTasks[task.key]) return;

  // 1. –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
  if (task.type === 'referral' && task.requiresReferralCount) {
    const referralLink = `https://t.me/OrdoHereticus_bot/vpnempire?startapp=${userId}`;
    try {
      if (window.Telegram?.WebApp?.clipboard?.writeText) {
        await window.Telegram.WebApp.clipboard.writeText(referralLink);
      } else {
        await navigator.clipboard.writeText(referralLink);
      }
      alert(`üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞:\n${referralLink}`);
    } catch {
      alert(`–°–∫–æ–ø–∏—Ä—É–π –≤—Ä—É—á–Ω—É—é:\n${referralLink}`);
    }

    try {
      const res = await fetch(`/api/check-referrals?user_id=${userId}`);
      const data = await res.json();
      const count = data.referrals || 0;
      setReferrals(count);

      if (count >= task.requiresReferralCount) {
        completeTask(task);
      } else {
        alert(`–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ ${count}/${task.requiresReferralCount} –¥—Ä—É–∑–µ–π`);
      }
    } catch (err) {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π.');
      console.error(err);
    }
    return;
  }

  // 2. –û–ø–ª–∞—Ç–∞ VPN
  if (task.type === 'vpn' && task.requiresPayment) {
    try {
      if (window.Telegram?.WebApp?.openTelegramLink) {
        window.Telegram.WebApp.openTelegramLink(task.link);
      } else {
        window.open(task.link, '_blank');
      }
      alert('üîÅ –û–ø–ª–∞—Ç–∏ VPN –≤ Telegram-–±–æ—Ç–µ, –∑–∞—Ç–µ–º –≤–µ—Ä–Ω–∏—Å—å –∏ –Ω–∞–∂–º–∏ ¬´–í—ã–ø–æ–ª–Ω–∏—Ç—å¬ª');
      return;
    } catch (error) {
      console.error ( '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –±–æ—Ç—É:', error);
      alert ( '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å Telegram-–±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –≤—Ä—É—á–Ω—É—é.');
return;
    }
  }
  try{
      const res = await fetch(`/api/check-payment?user_id=${userId}`);
      const data = await res.json();
      if (data.success) {
        setVpnActivated(true);
        setClickMultiplier(2);
        completeTask(task);
        alert('üéâ VPN –æ–ø–ª–∞—á–µ–Ω. x2 –∫–ª–∏–∫–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!');
      } else {
        alert('‚õîÔ∏è –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.');
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã:', err);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã.');
    }

  // 3. –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Telegram
  if (task.requiresSubscription) {
    try {
      if (window.Telegram?.WebApp?.openTelegramLink) {
        window.Telegram.WebApp.openTelegramLink(task.link);
      } else {
        window.open(task.link, '_blank');
      }

      setTimeout(async () => {
        const res = await fetch(`/api/check-subscription?user_id=${userId}`);
        const data = await res.json();
        if (data.subscribed) {
          setSubscribed(true);
          completeTask(task);
        } else {
          alert('–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É');
        }
      }, 2000);
    } catch (error) {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏');
      console.error(error);
    }
    return;
  }

  // 4. –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Instagram
  if (task.key === 'subscribeInstagram' && task.link) {
  try {
    if (window.Telegram?.WebApp?.openTelegramLink) {
      window.Telegram.WebApp.openTelegramLink(task.link);
    } else {
      window.open(task.link, '_blank');
    }
  } catch {
    alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å Instagram');
    return;
  }

  // –ü–æ–¥–æ–∂–¥–∞—Ç—å 3 —Å–µ–∫—É–Ω–¥—ã –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ API
  setTimeout(async () => {
    try {
      const res = await fetch(`/api/check-instagram-subscription?user_id=${userId}`);
      const data = await res.json();

      if (data.subscribed) {
        completeTask(task);
      } else {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ Instagram, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É');
      }
    } catch {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
    }
  }, 3000);

  return;
}

  // 5. –ü—Ä–æ—á–∏–µ –∑–∞–¥–∞–Ω–∏—è (—Å–æ—Ü—Å–µ—Ç–∏, —Ä–µ–∞–∫—Ü–∏—è, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ —Ç.–ø.)
  completeTask(task);
};
  
const renderTasks = () => (
  <div className="tasks-tab">
    <h2>üìã –ó–∞–¥–∞–Ω–∏—è</h2>
    {tasks.map((task) => {
      const isDisabled =
        (task.requiresReferralCount && referrals < task.requiresReferralCount) ||
        (task.disabled && !completedTasks[task.key]);

      return (
        <div
          key={task.key}
          className={`task-card ${completedTasks[task.key] ? "completed" : ""}`}
        >
          <h3>{task.label}</h3>
          {task.requiresReferralCount && (
            <p>
              üë• {Math.min(referrals, task.requiresReferralCount)}/
              {task.requiresReferralCount}
            </p>
          )}

          <p>üéØ –ù–∞–≥—Ä–∞–¥–∞: {task.reward} –º–æ–Ω–µ—Ç</p>

          {task.link && (
            <a href={task.link} target="_blank" rel="noopener noreferrer">
              <button className="task-button">–ü–µ—Ä–µ–π—Ç–∏</button>
            </a>
          )}
          {completedTasks[task.key] ? (
            <span className="done">‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ</span>
          ) : (
          task.type === 'referral' ? (
           <button
            onClick={() => handleTaskClick (task)}
             disabled={isDisabled}
             >
             –í—ã–ø–æ–ª–Ω–∏—Ç—å
             </button>
            ):(
            <button
              onClick={() => 
                task.requiresPayment
                  ? handlePaymentCheck(task.key)
                  : completeTask(task.key, task.reward)
              }
              disabled={isDisabled}
            >
              –í—ã–ø–æ–ª–Ω–∏—Ç—å
            </button>
          )
          )}
        </div>
      );
    })}

    {/* –ó–∞–≥–ª—É—à–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è */}
    <div className="task-card disabled-task">
      <span>üîí <strong>–°–∫–æ—Ä–æ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ</strong> ‚Äî  üîú –û–∂–∏–¥–∞–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π</span>
    </div>

    {/* –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–æ–≤ */}
    <button
      style={{ marginTop: 20 }}
      onClick={() => {
        localStorage.clear();
        window.location.reload();
      }}
    >
      üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (—Ç–µ—Å—Ç)
    </button>
  </div>
);

  const renderHome = () => (
    <div className="main-content">
      <div className="heander-box">
        <div className="coins">üí∞ –ú–æ–Ω–µ—Ç: {coins} $RICH</div>
        <div className="rank">üéñ –ó–≤–∞–Ω–∏–µ: {rank}</div>
    </div>
      <div className="robot-container">
        <img src="/robot.png" alt="robot" className="robot" onClick={handleClick} />
        <div className="clicks-left">üí• {clicksToday}/{maxClicksPerDay} –º–æ–Ω–µ—Ç</div>
      </div>
      <div className="helper-box">
        ü§ñ <strong>–Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫!</strong><br />
        –ö–ª–∏–∫–∞–π –Ω–∞ —Ä–æ–±–æ—Ç–∞ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –º–æ–Ω–µ—Ç—ã.
      </div>
      {flashes.map(f => (
        <div key={f.id} className="flash" style={{ left: f.x, top: f.y }} />
      ))}
    </div>
  );

  const renderTop = () => <TopTab coins={coins} />;
  const renderRoulette = () => <Roulette setCoins={setCoins} />;
const renderWithdraw = () => (
    <div className="withdraw-tab">
      <h2>üí∏ –í—ã–≤–æ–¥</h2>
      <p>–ú–∏–Ω–∏–º—É–º –¥–ª—è –≤—ã–≤–æ–¥–∞: 10000 –º–æ–Ω–µ—Ç</p>
      <button
        disabled={!isWithdrawApproved}
        className={isWithdrawApproved ? 'withdraw-button' : 'withdraw-button disabled'}
        onClick={() => {
          if (isWithdrawApproved) {
            window.open('https://www.instagram.com/internet.bot.001', '_blank');
          }
        }}
      >
        {isWithdrawApproved ? '–í—ã–≤–µ—Å—Ç–∏ —á–µ—Ä–µ–∑ Instagram' : '–û–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è'}
      </button>
      <button
        className="approve-button"
        onClick={() => {
          setIsWithdrawApproved(true);
          localStorage.setItem('isWithdrawApproved', 'true');
        }}
        style={{ marginTop: '20px', backgroundColor: 'green', color: 'white' }}
      >
        ‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –≤—ã–≤–æ–¥
      </button>
     </div>
  );

  const renderTab = () => {
    switch (activeTab) {
      case 'home': return renderHome();
      case 'tasks': return renderTasks();
      case 'roulette': return renderRoulette();
      case 'top': return renderTop();
      case 'withdraw': return renderWithdraw();
      default: return renderHome();
    }
  };

  return (
<div className="App">
      {renderTab()}
      <BottomNav activeTab={activeTab} setActiveTab={setActiveTab} />
    </div>
  );
}

export default App;

