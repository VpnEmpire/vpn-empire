// src/App.jsx
import React, { useState, useEffect, useRef } from 'react';
import './App.css';
import BottomNav from './components/BottomNav.jsx';
import TopTab from './components/Top.jsx';
import TasksTab from './components/Tasks.jsx';

function App() {
  const [activeTab, setActiveTab] = useState('home');
  const [coins, setCoins] = useState(() => Number(localStorage.getItem('coins')) || 0);
  const [rank, setRank] = useState('');
  const [clicksToday, setClicksToday] = useState(() => Number(localStorage.getItem('clicksToday')) || 0);
  const [hasSubscription, setHasSubscription] = useState(() => localStorage.getItem('hasSubscription') === 'true');
  const [completedTasks, setCompletedTasks] = useState(() => JSON.parse(localStorage.getItem('completedTasks')) || {});
  const [flashes, setFlashes] = useState([]);
  const maxClicksPerDay = 100;
  const spinSoundRef = useRef(null);
  const winSoundRef = useRef(null);
  const [canSpin, setCanSpin] = useState(true);
  const [isSpinning, setIsSpinning] = useState(false);
  const [spinResult, setSpinResult] = useState(null);
  const [userId, setUserId] = useState(null);
const [isWithdrawApproved, setIsWithdrawApproved] = useState(() =>
  localStorage.getItem('isWithdrawApproved') === 'true'
);
const handleApproveWithdraw = () => {
  setIsWithdrawApproved(true);
  localStorage.setItem('isWithdrawApproved', 'true');
};
  useEffect(() => {
    localStorage.setItem('coins', coins);
    localStorage.setItem('clicksToday', clicksToday);
    localStorage.setItem('completedTasks', JSON.stringify(completedTasks));
  }, [coins, clicksToday, completedTasks]);
useEffect(() => {
  updateRank(coins);
}, [coins]);
  
  useEffect(() => {
    const today = new Date().toDateString();
    if (localStorage.getItem('lastClickDate') !== today) {
      setClicksToday(0);
      localStorage.setItem('lastClickDate', today);
    }
    if (localStorage.getItem('dailyTaskDate') !== today) {
      setCompletedTasks({});
      localStorage.setItem('dailyTaskDate', today);
    }
    if (localStorage.getItem('lastSpinDate') === today) {
      setCanSpin(false);
    }
  useEffect(() => {
  if (window?.Telegram?.WebApp?.initDataUnsafe?.user?.id) {
    setUserId(window.Telegram.WebApp.initDataUnsafe.user.id);
  }
}, []);
    
  const updateRank = (totalCoins) => {
    if (totalCoins >= 5000) setRank('–õ–µ–≥–µ–Ω–¥–∞ VPN');
    else if (totalCoins >= 2000) setRank('–≠–∫—Å–ø–µ—Ä—Ç');
    else if (totalCoins >= 1000) setRank('–ü—Ä–æ—Ñ–∏');
    else if (totalCoins >= 500) setRank('–ê–≥–µ–Ω—Ç');
    else setRank('–ù–æ–≤–∏—á–æ–∫');
  };

  const handleClick = (e) => {
    if (clicksToday < maxClicksPerDay) {
      setCoins(prev => prev + 1);
      setClicksToday(prev => prev + 1);
      triggerAnimation();
      playClickSound();

      const flash = { x: e.clientX, y: e.clientY, id: Date.now() };
      setFlashes(prev => [...prev, flash]);
      setTimeout(() => {
        setFlashes(prev => prev.filter(f => f.id !== flash.id));
      }, 400);
    }
  };

  const triggerAnimation = () => {
    const flash = document.createElement('div');
    flash.className = 'flash';
    document.body.appendChild(flash);
    setTimeout(() => document.body.removeChild(flash), 300);
  };

  const playClickSound = () => {
    const audio = new Audio('/click.mp3');
    audio.play();
  };

  const handleComplete = async (key, reward, requiresCheck = false) => {
¬† if (completedTasks[key]) return;
    
¬† if (requiresCheck) {
¬† ¬† if (!userId) {
¬† ¬† ¬† alert("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å user_id –∏–∑ Telegram.");
¬† ¬† ¬† return;
¬† ¬† }
¬† ¬† const res = await fetch(`/api/check-subscription?user_id=${userId}`);
¬† ¬† const data = await res.json();

¬† ¬† if (!data.subscribed) {
¬† ¬† ¬† alert("‚ùó –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, –ø—Ä–µ–∂–¥–µ —á–µ–º –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ.");
¬† ¬† ¬† return;
¬† ¬† }
¬† }

¬† const updated = { ...completedTasks, [key]: true };
¬† setCoins(prev => prev + reward);
¬† setCompletedTasks(updated);
};
    
  const spinWheel = () => {
    if (!canSpin) return;
    if (spinSoundRef.current) spinSoundRef.current.play();

    const options = [20, 50, 100, 200, 300, 400];
    const result = options[Math.floor(Math.random() * options.length)];

    setTimeout(() => {
      setCoins(prev => prev + result);
      setSpinResult(result);
      setCanSpin(false);
      localStorage.setItem('lastSpinDate', new Date().toDateString());
      if (winSoundRef.current) winSoundRef.current.play();
    }, 2000);
  };

  const handleSubscriptionConfirm = () => {
    setHasSubscription(true);
    localStorage.setItem('hasSubscription', 'true');
  };

  const renderSubscriptionPrompt = () => (
    <div className="subscription-block">
      <h2>üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</h2>
      <p>–ß—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –æ—Ç 100‚ÇΩ –≤ Telegram-–±–æ—Ç–µ:</p>
      <a className="tg-link" href="https://t.me/OrdoHereticusVPN" target="_blank" rel="noopener noreferrer">
        –ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç
      </a>
      <button className="confirm-btn" onClick={handleSubscriptionConfirm}>
        ‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª
      </button>
    </div>
  );

  const renderHome = () => (
    <div className="main-content">
      <div className="heander-box">
        <div className="coins">üí∞ –ú–æ–Ω–µ—Ç: {coins} $RICH</div>
        <div className="rank">üéñ –ó–≤–∞–Ω–∏–µ: {rank}</div>
      </div>
      <div className="robot-container">
        <img src="/robot.png" alt="robot" className="robot" onClick={handleClick} />
        <div className="clicks-left">üí• {clicksToday}/{maxClicksPerDay} –º–æ–Ω–µ—Ç</div>
      </div>
      <div className="helper-box">
        ü§ñ <strong>–Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫!</strong><br />
        –ö–ª–∏–∫–∞–π –Ω–∞ —Ä–æ–±–æ—Ç–∞ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –º–æ–Ω–µ—Ç—ã.
      </div>
      {flashes.map(f => (
        <div key={f.id} className="flash" style={{ left: f.x, top: f.y }} />
      ))}
    </div>
  );

  const renderTasks = () => {
    const tasks = [
      { key: 'invite1', label: '–ü—Ä–∏–≥–ª–∞—Å–∏ 1 –¥—Ä—É–≥–∞', reward: 50 },
      { key: 'invite2', label: '–ü—Ä–∏–≥–ª–∞—Å–∏ 2 –¥—Ä—É–∑–µ–π', reward: 100 },
      { key: 'invite3', label: '–ü—Ä–∏–≥–ª–∞—Å–∏ 3 –¥—Ä—É–∑–µ–π', reward: 200 },
      { key: 'invite4', label: '–ü—Ä–∏–≥–ª–∞—Å–∏ 4 –¥—Ä—É–∑–µ–π', reward: 300 },
      { key: 'invite5', label: '–ü—Ä–∏–≥–ª–∞—Å–∏ 5 –¥—Ä—É–∑–µ–π', reward: 400 },
      { key: 'invite6', label: '–ü—Ä–∏–≥–ª–∞—Å–∏ 6 –¥—Ä—É–∑–µ–π', reward: 500 },
      { key: 'invite7', label: '–ü—Ä–∏–≥–ª–∞—Å–∏ 7 –¥—Ä—É–∑–µ–π', reward: 600 },
      { key: 'subscribeTelegram', label: 'üì® –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ Telegram', reward: 100, link: 'https://t.me/OrdoHereticusVPN' },
      { key: 'subscribeInstagram', label: 'üì∏ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ Instagram', reward: 100, link: 'https://www.instagram.com/internet.bot.001?igsh=MXRhdzRhdmc1aGhybg==' },
      { key: 'shareSocial', label: 'üì¢ –†–∞—Å—Å–∫–∞–∂–∏ –æ –Ω–∞—Å –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö', reward: 100 },
      { key: 'commentPost', label: 'üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', reward: 50 },
      { key: 'reactPost', label: '‚ù§Ô∏è –ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é', reward: 50 },
      { key: 'dailyVpn', label: 'üõ° –ó–∞—Ö–æ–¥–∏—Ç—å –≤ VPN –∫–∞–∂–¥—ã–π –¥–µ–Ω—å', reward: 100 }
    ];

    return (
      <div className="tasks-tab">
        <h2>üìã –ó–∞–¥–∞–Ω–∏—è</h2>
        {tasks.map(task => (
          <div key={task.key} className="task-card">
            <span>
              {task.link ? (
                <a href={task.link} target="_blank" rel="noopener noreferrer">{task.label}</a>
              ) : (
                task.label
              )} ‚Äî ü™ô {task.reward}–º–æ–Ω–µ—Ç
            </span>
            {completedTasks[task.key] ? (
              <span className="done">‚úÖ</span>
            ) : (
              <button onClick={() => handleComplete(task.key, task.reward)}>–í—ã–ø–æ–ª–Ω–∏—Ç—å</button>
            )}
          </div>
        ))}
          <div className="task-card disabled-task">
  <span>üîí <strong>–°–∫–æ—Ä–æ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ</strong> ‚Äî üîú –û–∂–∏–¥–∞–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π</span>
</div>
  </div>
    );
  };

  const renderRoulette = () => (
    <div className="roulette-tab">
      <h2>üé∞ –†—É–ª–µ—Ç–∫–∞</h2>
      <img src="/roulette.gif" alt="–†—É–ª–µ—Ç–∫–∞" className="roulette-image" style={{ width: '200px', marginBottom: '20px' }} />
      <button className="spin-button" onClick={spinWheel} disabled={!canSpin}>
        –ö—Ä—É—Ç–∏—Ç—å
      </button>
      {spinResult !== '' && <div className="spin-result">+{spinResult} –º–æ–Ω–µ—Ç!</div>}
      <audio ref={spinSoundRef} src="/spin-sound.mp3" preload="auto" />
      <audio ref={winSoundRef} src="/coins_many.mp3" preload="auto" />
    </div>
  );

  const renderTop = () => (
    <TopTab coins={coins} />
  );

 const renderWithdraw = () => (
  <div className="withdraw-tab">
    <h2>üí∏ –í—ã–≤–æ–¥</h2>
    <p>–ú–∏–Ω–∏–º—É–º –¥–ª—è –≤—ã–≤–æ–¥–∞: 10000 –º–æ–Ω–µ—Ç</p>

    <button
      disabled={!isWithdrawApproved}
      className={isWithdrawApproved ? 'withdraw-button' : 'withdraw-button disabled'}
      onClick={() => {
        if (isWithdrawApproved) {
          window.open('https://www.instagram.com/internet.bot.001?igsh=MXRhdzRhdmc1aGhybg==', '_blank');
        }
      }}
    >
      {isWithdrawApproved ? '–í—ã–≤–µ—Å—Ç–∏ —á–µ—Ä–µ–∑ Instagram' : '–û–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è'}
    </button>

    {/* –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∫–Ω–æ–ø–∫–∞ "–æ–¥–æ–±—Ä–∏—Ç—å", —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–±—è */}
    <button
      className="approve-button"
      onClick={handleApproveWithdraw}
      style={{ marginTop: '20px', backgroundColor: 'green', color: 'white' }}
    >
      ‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –≤—ã–≤–æ–¥ (–≤–∏–¥–∏—à—å —Ç–æ–ª—å–∫–æ —Ç—ã)
    </button>
  </div>
);

  const renderTab = () => {
    switch (activeTab) {
      case 'home': return renderHome();
      case 'tasks': return renderTasks();
      case 'roulette': return renderRoulette();
      case 'top': return renderTop();
      case 'withdraw': return renderWithdraw();
      default: return renderHome();
    }
  };

  if (!hasSubscription) return renderSubscriptionPrompt();

  return (
    <div className="App">
      {renderTab()}
      <BottomNav activeTab={activeTab} setActiveTab={setActiveTab} />
    </div>
  );
}

export default App;
