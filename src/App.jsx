import React, { useState, useEffect, useRef } from 'react';
import './App.css';
import BottomNav from './components/BottomNav.jsx';
import TopTab from './components/Top.jsx';
import Roulette from './components/Roulette.jsx';
import Hometab from './components/Home.jsx';

function App() {
  const [activeTab, setActiveTab] = useState('home');
  const [coins, setCoins] = useState(() => Number(localStorage.getItem('coins')) || 0);
  const [rank, setRank] = useState('');
  const [clicksToday, setClicksToday] = useState(() => Number(localStorage.getItem('clicksToday')) || 0);
  const [hasSubscription, setHasSubscription] = useState(() => localStorage.getItem('hasSubscription') === 'true');
  const [completedTasks, setCompletedTasks] = useState(() => 
JSON.parse(localStorage.getItem('completedTasks')) || {});
  const [flashes, setFlashes] = useState([]);
  const [userId, setUserId] = useState(null);
  const [referrals, setReferrals] = useState(0);
  const [vpnActivated, setVpnActivated] = useState(false);
  const [subscribed, setSubscribed] = useState(false);
  const [isWithdrawApproved, setIsWithdrawApproved] = useState(() => localStorage.getItem('isWithdrawApproved') === 'true');
  const [tasks, setTasks] = useState([
    { key: 'invite1', label: '–ü—Ä–∏–≥–ª–∞—Å–∏ 1 –¥—Ä—É–≥–∞', reward: 50, type: 'referral', requiresReferralCount: 1 },
    { key: 'invite2', label: '–ü—Ä–∏–≥–ª–∞—Å–∏ 2 –¥—Ä—É–∑–µ–π', reward: 100, type: 'referral', requiresReferralCount: 2 },
    { key: 'invite3', label: '–ü—Ä–∏–≥–ª–∞—Å–∏ 3 –¥—Ä—É–∑–µ–π', reward: 200, type: 'referral', requiresReferralCount: 3 },
    { key: 'invite4', label: '–ü—Ä–∏–≥–ª–∞—Å–∏ 4 –¥—Ä—É–∑–µ–π', reward: 300, type: 'referral', requiresReferralCount: 4 },
    { key: 'invite5', label: '–ü—Ä–∏–≥–ª–∞—Å–∏ 5 –¥—Ä—É–∑–µ–π', reward: 400, type: 'referral', requiresReferralCount: 5 },
    { key: 'invite6', label: '–ü—Ä–∏–≥–ª–∞—Å–∏ 6 –¥—Ä—É–∑–µ–π', reward: 500, type: 'referral', requiresReferralCount: 6 },
    { key: 'invite7', label: '–ü—Ä–∏–≥–ª–∞—Å–∏ 7 –¥—Ä—É–∑–µ–π', reward: 600, type: 'referral', requiresReferralCount: 7 },
    { key: 'subscribeTelegram', label: 'üì® –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ Telegram', reward: 100, type: 'subscribe', link: 'https://t.me/OrdoHereticusVPN', requiresSubscription: true },
    { key: 'subscribeInstagram', label: 'üì∏ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ Instagram', reward: 100, type: 'subscribe', link: 
'https://www.instagram.com/internet.bot.001?igsh=MXRhdzRhdmc1aGhybg==' },
    { key: 'shareSocial', label: 'üì¢ –†–∞—Å—Å–∫–∞–∂–∏ –æ –Ω–∞—Å –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö', reward: 100 },
    { key: 'commentPost', label: 'üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', reward: 50 },
    { key: 'reactPost', label: '‚ù§Ô∏è –ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é', reward: 50 },
    { key: 'dailyVpn', label: 'üõ° –ó–∞—Ö–æ–¥–∏—Ç—å –≤ VPN –∫–∞–∂–¥—ã–π –¥–µ–Ω—å', reward: 100 },
    { key: 'activateVpn', label: 'üöÄ –ê–∫—Ç–∏–≤–∏—Ä—É–π VPN', reward: 1000, type: 'vpn', link: 'https://t.me/OrdoHereticus_bot', requiresPayment: true }
  ]);

  const maxClicksPerDay = 100;
  const spinSoundRef = useRef(null);
  const winSoundRef = useRef(null);
  const [canSpin, setCanSpin] = useState(true);
  const [spinResult, setSpinResult] = useState(null);
  useEffect(() => {
    const tgUserId = window?.Telegram?.WebApp?.initDataUnsafe?.user?.id;
    if (tgUserId) {
      setUserId(tgUserId);
      fetch(`/api/check-referrals?user_id=${tgUserId}`)
        .then(res => res.json())
        .then(data => setReferrals(data.referrals || 0));

      fetch(`/api/check-subscription?user_id=${tgUserId}`)
        .then(res => res.json())
        .then(data => setSubscribed(data.subscribed));

      fetch(`/api/check-payment?user_id=${tgUserId}`)
        .then(res => res.json())
        .then(data => setVpnActivated(data.success));
    }
  }, []);
useEffect(() => {
    localStorage.setItem('coins', coins);
    localStorage.setItem('clicksToday', clicksToday);
    localStorage.setItem('completedTasks', JSON.stringify(completedTasks));
  }, [coins, clicksToday, completedTasks]);

  useEffect(() => {
    updateRank(coins);
  }, [coins]);

  useEffect(() => {
    const today = new Date().toDateString();
    if (localStorage.getItem('lastClickDate') !== today) {
      setClicksToday(0);
      localStorage.setItem('lastClickDate', today);
    }
    if (localStorage.getItem('dailyTaskDate') !== today) {
      const updatedTasks = tasks.map(task =>
        task.key === 'dailyVPN' ? { ...task, done: false } : task
      );
      setTasks(updatedTasks);
      localStorage.setItem('tasks', JSON.stringify(updatedTasks));
      localStorage.setItem('dailyTaskDate', today);
    }
    if (localStorage.getItem('lastSpinDate') === today) {
      setCanSpin(false);
    }
  }, []);

  const updateRank = (totalCoins) => {
    if (totalCoins >= 5000) setRank('–õ–µ–≥–µ–Ω–¥–∞ VPN');
    else if (totalCoins >= 2000) setRank('–≠–∫—Å–ø–µ—Ä—Ç');
    else if (totalCoins >= 1000) setRank('–ü—Ä–æ—Ñ–∏');
    else if (totalCoins >= 500) setRank('–ê–≥–µ–Ω—Ç');
    else setRank('–ù–æ–≤–∏—á–æ–∫');
  };

  const playClickSound = () => {
const audio = new Audio('/click.mp3');
    audio.play().catch((e) => console.log('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞:', e));
  };

  const handleClick = (e) => {
    if (clicksToday < maxClicksPerDay) {
      const multiplier = Number(localStorage.getItem('clickMultiplier')) || 1;
      setCoins(prev => prev + 1 * multiplier);
      setClicksToday(prev => prev + 1);
      triggerAnimation();
      playClickSound();
    }
    const flash = { x: e.clientX, y: e.clientY, id: Date.now() };
    setFlashes(prev => [...prev, flash]);
setTimeout(() => {
      setFlashes(prev => prev.filter(f => f.id !== flash.id));
    }, 400);
  };

  const triggerAnimation = () => {
    const flash = document.createElement('div');
    flash.className = 'flash'; 
    flash.style.left = `${Math.random() * window.innerWidth}px`;
    flash.style.top = `${Math.random() * window.innerHeight}px`;
    document.body.appendChild(flash);
    setTimeout(() => {
      document.body.removeChild(flash);
    }, 300);
  };

const completeTask = (task) => {
  if (completedTasks[task.key]) return;
  const updatedTasks = tasks.map(t =>
    t.key === task.key ? { ...t, done: true } : t
  );
  setCompletedTasks(updatedTasks);
  localStorage.setItem('completedTasks', JSON.stringify(updatedTasks));
// –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –í–°–ï –∑–∞–¥–∞–Ω–∏—è –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é –≤—ã–ø–æ–ª–Ω–µ–Ω—ã ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Ö
  const allReferralDone = referralKeys.every(key => updatedTasks[key]);
  if (allReferralDone) {
    const reset = { ...updatedTasks };
    referralKeys.forEach(key => {
      reset[key] = false;
    });
    setTimeout(() => {
      setCompletedTasks(reset);
      localStorage.setItem('completedTasks', JSON.stringify(reset));
      alert('üéâ –ó–∞–¥–∞–Ω–∏—è –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ');
    }, 1000);
  }

  // –ù–∞–≥—Ä–∞–¥–∞ (–º–æ–∂–Ω–æ —Ç—É—Ç –¥–æ–±–∞–≤–∏—Ç—å setCoins)
  alert(`üéÅ –¢—ã –ø–æ–ª—É—á–∏–ª ${task.reward} –º–æ–Ω–µ—Ç!`);
};

  
  const updatedCompleted = { ...completedTasks, [task.key]: true };
  setCompletedTasks(updatedCompleted);
  localStorage.setItem('completedTasks', JSON.stringify(updatedCompleted));

  if (task.key === 'activateVpn') {
    setVpnActivated(true);
    localStorage.setItem('vpnActivated', 'true');
    localStorage.setItem('clickMultiplier', '2');
  }

  setCoins(prev => {
    const newCoins = prev + task.reward;
    localStorage.setItem('coins', newCoins);
    return newCoins;
  });
};
 
const handleTaskClick = async (task) => {
  if (completedTasks[task.key]) return;

    const referralLink = `https://t.me/OrdoHereticus_bot/vpnempire?startapp=${userId}`;

  // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏
  try {
    if (window.Telegram?.WebApp?.clipboard?.writeText) {
      await window.Telegram.WebApp.clipboard.writeText(referralLink);
    } else {
      await navigator.clipboard.writeText(referralLink);
    }
    alert(`üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞:\n${referralLink}`);
  } catch {
    alert(`–°–∫–æ–ø–∏—Ä—É–π –≤—Ä—É—á–Ω—É—é:\n${referralLink}`);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö
  try {
    const res = await fetch(`/api/check-referrals?user_id=${userId}`);
    const data = await res.json();
    const count = data.referrals || 0;
    setReferrals(count);

    if (count >= task.requiresReferralCount) {
      completeTask(task);
    } else {
      alert(`–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ ${count}/${task.requiresReferralCount} –¥—Ä—É–∑–µ–π`);
    }
  } catch (err) {
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π.');
    console.error(err);
  }
};

  
  // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
  if (task.type === 'referral' && task.requiresReferralCount) {
    try {
      const res = await fetch(`/api/check-referrals?user_id=${userId}`);
      const data = await res.json();
      const count = data.referrals || 0;
      setReferrals(count);

      const allReferralTasksDone = tasks
        .filter(t => t.type === 'referral')
        .every(t => completedTasks[t.key]);

      if (count >= task.requiresReferralCount) {
        completeTask(task);
        // –µ—Å–ª–∏ –≤—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å
        if (allReferralTasksDone) {
          const updated = tasks.map(t =>
            t.type === 'referral' ? { ...t, done: false } : t
          );
          setTasks(updated);
          localStorage.setItem('tasks', JSON.stringify(updated));
        }
      } else {
        alert(`–ü—Ä–∏–≥–ª–∞—Å–∏ —Ö–æ—Ç—è –±—ã ${task.requiresReferralCount} –¥—Ä—É–∑–µ–π`);
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', err);
    }
    return;
  }

  // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
  if (task.requiresSubscription) {
    try {
      const res = await fetch(`/api/check-subscription?user_id=${userId}`);
      const data = await res.json();
      setSubscribed(data.subscribed);
      if (data.subscribed) {
        completeTask(task);
      } else {
        alert('–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ Telegram-–∫–∞–Ω–∞–ª');
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', err);
    }
    return;
  }

  // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã
  if (task.requiresPayment) {
    try {
      const res = await fetch(`/api/check-payment?user_id=${userId}`);
      const data = await res.json();
      setVpnActivated(data.success);
      if (data.success) {
        completeTask(task);
      } else {
        alert('–ê–∫—Ç–∏–≤–∏—Ä—É–π VPN —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞');
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã:', err);
    }
    return;
  }

  // 6. –ë–µ–∑ —É—Å–ª–æ–≤–∏–π ‚Äî —Å—Ä–∞–∑—É –≤—ã–ø–æ–ª–Ω—è—Ç—å
  if (
    !task.requiresSubscription &&
    !task.requiresPayment &&
    !(task.type === 'referral' && task.requiresReferralCount)
  ) {
    completeTask(task);
  };
  
const renderTasks = () => (
  <div className="tasks-tab">
    <h2>üìã –ó–∞–¥–∞–Ω–∏—è</h2>
    {tasks.map(task => (
      <div
        key={task.key}
        className={`task-card ${task.done ? 'completed' : ''}`}
        onClick={() => handleTaskClick(task)}
      >
        <h3>{task.label}</h3>
        {task.requiresReferralCount && (
          <p>üë• {Math.min(referrals, task.requiresReferralCount)}/{task.requiresReferralCount} –¥—Ä—É–∑–µ–π</p>
        )}
        <p>ü™ô –ù–∞–≥—Ä–∞–¥–∞: {task.reward} –º–æ–Ω–µ—Ç</p>
        {task.done ? (
          <span className="done">‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ</span>
        ) : (
          <button onClick={(e) => {
            e.stopPropagation();
            completeTask(task);
          }}>–í—ã–ø–æ–ª–Ω–∏—Ç—å</button>
        )}
      </div>
    ))}

    {/* –ó–∞–≥–ª—É—à–∫–∞ –≤–Ω–∏–∑—É */}
    <div className="task-card disabled-task">
      <span>üîí <strong>–°–∫–æ—Ä–æ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ</strong> ‚Äî üîú –û–∂–∏–¥–∞–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π</span>
    </div>
  </div>
);
  
  const renderHome = () => (
    <div className="main-content">
      <div className="heander-box">
        <div className="coins">üí∞ –ú–æ–Ω–µ—Ç: {coins} $RICH</div>
        <div className="rank">üéñ –ó–≤–∞–Ω–∏–µ: {rank}</div>
    </div>
      <div className="robot-container">
        <img src="/robot.png" alt="robot" className="robot" onClick={handleClick} />
        <div className="clicks-left">üí• {clicksToday}/{maxClicksPerDay} –º–æ–Ω–µ—Ç</div>
      </div>
      <div className="helper-box">
        ü§ñ <strong>–Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫!</strong><br />
        –ö–ª–∏–∫–∞–π –Ω–∞ —Ä–æ–±–æ—Ç–∞ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –º–æ–Ω–µ—Ç—ã.
      </div>
      {flashes.map(f => (
        <div key={f.id} className="flash" style={{ left: f.x, top: f.y }} />
      ))}
    </div>
  );

  const renderTop = () => <TopTab coins={coins} />;
  const renderRoulette = () => <Roulette setCoins={setCoins} />;
const renderWithdraw = () => (
    <div className="withdraw-tab">
      <h2>üí∏ –í—ã–≤–æ–¥</h2>
      <p>–ú–∏–Ω–∏–º—É–º –¥–ª—è –≤—ã–≤–æ–¥–∞: 10000 –º–æ–Ω–µ—Ç</p>
      <button
        disabled={!isWithdrawApproved}
        className={isWithdrawApproved ? 'withdraw-button' : 'withdraw-button disabled'}
        onClick={() => {
          if (isWithdrawApproved) {
            window.open('https://www.instagram.com/internet.bot.001', '_blank');
          }
        }}
      >
        {isWithdrawApproved ? '–í—ã–≤–µ—Å—Ç–∏ —á–µ—Ä–µ–∑ Instagram' : '–û–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è'}
      </button>
      <button
        className="approve-button"
        onClick={() => {
          setIsWithdrawApproved(true);
          localStorage.setItem('isWithdrawApproved', 'true');
        }}
        style={{ marginTop: '20px', backgroundColor: 'green', color: 'white' }}
      >
        ‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –≤—ã–≤–æ–¥
      </button>
     </div>
  );

  const renderTab = () => {
    switch (activeTab) {
      case 'home': return renderHome();
      case 'tasks': return renderTasks();
      case 'roulette': return renderRoulette();
      case 'top': return renderTop();
      case 'withdraw': return renderWithdraw();
      default: return renderHome();
    }
  };

  return (
<div className="App">
      {renderTab()}
      <BottomNav activeTab={activeTab} setActiveTab={setActiveTab} />
    </div>
  );
}

export default App;

