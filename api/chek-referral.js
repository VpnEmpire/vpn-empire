// /api/check-referral.js

import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  process.env.VITE_SUPABASE_URL,
  process.env.SUPABASE_KEY
);

export default async function handler(req, res) {
  if (req.method !== 'POST') return res.status(405).send('Method Not Allowed');

  const { user_id, task_key, required_count } = req.body;

  if (!user_id || !task_key || required_count === undefined) {
    return res.status(400).json({ error: 'user_id, task_key –∏ required_count –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
  }

  // üîç –ü–æ–ª—É—á–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö
  const { count, error } = await supabase
    .from('referrals')
    .select('*', { count: 'exact', head: true })
    .eq('referral_id', user_id);

  if (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤' });
  }

  console.log(`üë• –ù–∞–π–¥–µ–Ω–æ ${count} –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö —É ${user_id}`);

  if (count < required_count) {
    console.warn(`‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (${count}/${required_count})`);
    return res.status(200).json({ success: false, invited: count });
  }

  // üîí –ü—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ª–∏ —É–∂–µ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ
  const { data: existing, error: checkError } = await supabase
    .from('referral_tasks')
    .select('*')
    .eq('user_id', user_id)
    .eq('task_key', task_key)
    .order('created_at', { ascending: false }) // ‚¨Ö –∫–∞–∫ –≤ vpn-–ø—Ä–æ–≤–µ—Ä–∫–µ
    .limit(1)
    .maybeSingle();

  if (checkError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', checkError);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞–Ω–∏—è' });
  }

  if (existing) {
    console.warn(`‚ö†Ô∏è –ó–∞–¥–∞–Ω–∏–µ ${task_key} —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ`);
    return res.status(200).json({ success: false, alreadyCompleted: true });
  }

  // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
  const { error: insertError } = await supabase
    .from('referral_tasks')
    .insert([{ user_id, task_key }]);

  if (insertError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è:', insertError);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è' });
  }

  console.log(`‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ ${task_key} —É—Å–ø–µ—à–Ω–æ –∑–∞—Å—á–∏—Ç–∞–Ω–æ`);
  return res.status(200).json({ success: true, invited: count });
}
