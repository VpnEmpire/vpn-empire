import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY; // —ç—Ç–æ—Ç –∫–ª—é—á –¥–ª—è server side!
const supabase = createClient(supabaseUrl, supabaseKey);

export const config = {
  api: {
    bodyParser: {
      sizeLimit: '1mb',
    },
  },
};

export default async function handler(req, res) {
  if (req.method !== 'POST') return res.status(405).send('Method Not Allowed');

  const event = req.body;
  console.log('üì¶ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –æ—Ç YooKassa:', event);

  const description = event.object?.description || '';
  const userIdMatch = description.match(/–ó–∞–∫–∞–∑ –¥–ª—è (\d+)/);
  const userId = userIdMatch ? userIdMatch[1] : null;

  // üîπ task_key: –∏—â–µ–º, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: task_key:activateVPN)
  const taskKeyMatch = description.match(/task_key:([\w\d_-]+)/);
  const task_key = taskKeyMatch ? taskKeyMatch[1] : null;
  
  if (!userId) {
    console.error('‚ùå userId –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ description:', description);
    return res.status(400).json({ error: 'userId –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ description' });
  }

  if (event.object?.status === 'succeeded') {
    const paymentId = event.object.id;
    const amount = event.object.amount?.value || null;

    const { data: existing, error: errCheck } = await supabase
      .from('payments')
      .select('id')
      .eq('payment_id', paymentId)
      .limit(1)
      .maybeSingle();

    if (errCheck) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥—É–±–ª–∏–∫–∞—Ç–∞:', errCheck);
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ' });
    }

    if (existing) {
      console.log('‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', paymentId);
      return res.status(200).json({ message: '–ü–ª–∞—Ç–µ–∂ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω' });
    }

    const { error } = await supabase.from('payments').insert([
      {
        user_id: String(userId),
        payment_id: paymentId,
        amount: amount,
        status: 'succeeded',
        used: false, // –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        task_key: 'activateVpn' , // –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        created_at: new Date().toISOString(),
      },
    ]);

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –≤ –±–∞–∑—É:', error);
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏' });
    }

    console.log('‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω');
    return res.status(200).json({ success: true });
  }

  return res.status(400).json({ error: '–ü–ª–∞—Ç–µ–∂ –Ω–µ —É—Å–ø–µ—à–µ–Ω' });
}
