// /api/check-vpn-payment.js

import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  process.env.VITE_SUPABASE_URL,
  process.env.SUPABASE_KEY
);
 
export default async function handler(req, res) {
  if (req.method !== 'POST') return res.status(405).send('Method Not Allowed');

  const { user_id, task_key } = req.body;

  if (!user_id || !task_key) {
    return res.status(400).json({ error: 'user_id –∏ task_key –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
  }

  // üîê –ù–∞–π–¥—ë–º —Å—Ç—Ä–æ–≥–æ –æ–¥–Ω—É –æ–ø–ª–∞—Ç—É, –∫–æ—Ç–æ—Ä–∞—è –µ—â—ë –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–º—É –∑–∞–¥–∞–Ω–∏—é
  const { data, error } = await supabase
    .from('payments')
    .select('*')
    .eq('user_id', user_id)
    .eq('status', 'succeeded')
    .eq('used', false)
    .eq('task_key', task_key) // üëà —Å—Ç—Ä–æ–≥–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
    .order('created_at', { ascending: false })
    .limit(1)
    .maybeSingle();

  if (error || !data) {
    console.warn('‚õî –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞');
    return res.status(200).json({ success: false });
  }

  // ‚úÖ –û–±–Ω–æ–≤–∏–º ‚Äî —Ç–µ–ø–µ—Ä—å —ç—Ç–∞ –æ–ø–ª–∞—Ç–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–π
  const { error: updateError } = await supabase
    .from('payments')
    .update({ used: true })
    .eq('id', data.id);

  if (updateError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ used:', updateError);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã' });
  }

  console.log('‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è');
  return res.status(200).json({ success: true });
}