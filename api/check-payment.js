// /api/check-payment.js

import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  process.env.REACT_APP_SUPABASE_URL,
  process.env.REACT_APP_SUPABASE_ANON_KEY
);

export default async function handler(req, res) {
  const { user_id } = req.query;

  if (!user_id) {
    return res.status(400).json({ error: 'user_id is required' });
  }

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É, –∫–æ—Ç–æ—Ä–∞—è –µ—â–µ –Ω–µ –±—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞
    const { data, error } = await supabase
      .from('payments')
      .select('*')
      .eq('user_id', user_id)
      .eq('status', 'succeeded')
      .eq('used', false)
      .order('created_at', { ascending: false })
      .limit(1)
      .maybeSingle();

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Supabase:', error);
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã' });
    }

    if (!data) {
      console.log('‚õî –ù–µ—Ç –Ω–æ–≤–æ–π —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã');
      return res.status(200).json({ success: false });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å used = true, —á—Ç–æ–±—ã –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –ø–ª–∞—Ç—ë–∂
    const { error: updateError } = await supabase
      .from('payments')
      .update({ used: true })
      .eq('id', data.id);

    if (updateError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ used=true:', updateError);
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è used' });
    }

    console.log('‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è');
    return res.status(200).json({ success: true });
  } catch (err) {
    console.error('üí• –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err);
    return res.status(500).json({ error: 'Server error' });
  }
}
