// /api/check-referral.js

import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  process.env.VITE_SUPABASE_URL,
  process.env.SUPABASE_KEY
);

export const config = {
  api: {
    bodyParser: {
      sizeLimit: '1mb',
    },
  },
};

export default async function handler(req, res) {
  console.log('üì• [check-referral] –ó–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω');

  if (req.method !== 'POST') {
    return res.status(405).json({ error: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π POST.' });
  }

  const { user_id, task_key, required_count } = req.body;
  console.log('üîπ user_id:', user_id);
  console.log('üîπ task_key:', task_key);
  console.log('üîπ required_count:', required_count);

  if (!user_id || !task_key || required_count === undefined) {
    return res.status(400).json({ error: '–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (user_id, task_key, required_count)' });
  }

  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö
    const { count, error: countError } = await supabase
      .from('referrals')
      .select('*', { count: 'exact', head: true })
      .eq('referral_id', user_id) // üëà –ö—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª
      .eq('source', 'game');

    if (countError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á—ë—Ç–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', countError.message);
      return res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ' });
    }

    console.log(`üë• –ù–∞–π–¥–µ–Ω–æ ${count} –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö`);

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    if (count < required_count) {
      return res.status(200).json({
        success: false,
        invited: count,
        error: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${count}/${required_count}`,
      });
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ª–∏ —É–∂–µ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ
    const { data: existing, error: existingError } = await supabase
      .from('referral_tasks')
      .select('*')
      .eq('user_id', user_id)
      .eq('task_key', task_key)
      .maybeSingle();

    if (existingError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', existingError.message);
      return res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ Supabase' });
    }

    if (existing) {
      console.warn(`‚ö†Ô∏è –ó–∞–¥–∞–Ω–∏–µ ${task_key} —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ`);
      return res.status(200).json({ success: false, alreadyCompleted: true });
    }

    // 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
    const { error: insertError } = await supabase
      .from('referral_tasks')
      .insert([{ user_id, task_key }]);

    if (insertError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', insertError.message);
      return res.status(500).json({ success: false, error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ' });
    }

    console.log(`‚úÖ –ó–∞–¥–∞–Ω–∏–µ ${task_key} —É—Å–ø–µ—à–Ω–æ –∑–∞—Å—á–∏—Ç–∞–Ω–æ`);
    return res.status(200).json({ success: true, invited: count });

  } catch (e) {
    console.error('‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞:', e);
    return res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
}
