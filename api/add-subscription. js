import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
);

export default async function handler(req, res) {
  console.log('üîç –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ check-subscription');
  console.log('üì¶ –ú–µ—Ç–æ–¥:', req.method);

  if (req.method !== 'POST') {
    return res.status(405).json({ error: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π POST.' });
  }

  const { user_id, channel } = req.body;
  console.log('üì® user_id:', user_id);
  console.log('üì® channel:', channel);

  if (!user_id || !channel) {
    return res.status(400).json({ error: '–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö: user_id –∏–ª–∏ channel' });
  }

  try {
    const { data, error } = await supabase
      .from('subscriptions')
      .select('is_subscribed')
      .eq('user_id', user_id)
      .eq('channel', channel)
      .single();

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ Supabase:', error.message);
      return res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ Supabase' });
    }

    const isSubscribed = data?.is_subscribed === true;

    console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–∞:', isSubscribed);
    return res.status(200).json({ success: isSubscribed });
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', e);
    return res.status(500).json({ success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
}
